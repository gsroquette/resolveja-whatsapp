const express = require('express');
const axios = require('axios');
const bodyParser = require('body-parser');
require('dotenv').config();

const app = express();
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

const PORT = process.env.PORT || 3000;

/* ------------------------------ Cat√°logo ------------------------------ */
const servicos = [
  {
    categoria: 'el√©trica',
    palavras: ['l√¢mpada', 'lampada', 'tomada', 'interruptor', 'chuveiro', 'lumin√°ria', 'luminaria', 'luz'],
    tempo: 'at√© 1 hora',
    resposta: 'Esse servi√ßo costuma levar at√© 1 hora e pode ser agendado com pre√ßo fixo.'
  },
  {
    categoria: 'hidr√°ulica',
    palavras: [
      'torneira', 'rabicho', 'sif√£o', 'sifao', 'ralo', 'registro',
      'v√°lvula', 'valvula', 'descarga', 'vaso sanit√°rio', 'vaso sanitario', 'caixa acoplada'
    ],
    tempo: 'at√© 2 horas',
    resposta: 'Esse tipo de reparo costuma levar at√© 2 horas. Podemos agendar com pre√ßo fixo ou fazer or√ßamento r√°pido no local.'
  },
  {
    categoria: 'instala√ß√£o',
    palavras: [
      'fog√£o', 'fogao', 'm√°quina de lavar', 'maquina de lavar',
      'lava-lou√ßas', 'lava lou√ßas', 'lava-loucas', 'lava loucas'
    ],
    tempo: 'at√© 2 horas (com ponto pronto)',
    resposta: 'A instala√ß√£o costuma levar at√© 2 horas se o ponto j√° estiver pronto. Agendamos com pre√ßo fixo ou avaliamos no local.'
  },
  {
    categoria: 'paredes e acabamento',
    palavras: [
      'quadro', 'prateleira', 'espelho', 'buraco', 'pintura', 'mofo',
      'rejunte', 'massa corrida', 'pendurar'
    ],
    tempo: '1 a 2 horas, podendo variar',
    resposta: 'Esse servi√ßo pode levar de 1 a 2 horas, dependendo da complexidade. Em casos maiores, fazemos or√ßamento.'
  },
  {
    categoria: 'ajustes em m√≥veis ou portas',
    palavras: ['porta', 'gaveta', 'arm√°rio', 'armario', 'dobradi√ßa', 'dobradica', 'fechadura'],
    tempo: 'at√© 2 horas',
    resposta: 'Podemos realizar esse ajuste em at√© 2 horas. Agendamos com pre√ßo fixo.'
  },
  {
    categoria: 'desentupimento',
    palavras: ['entupido', 'desentupir', 'desentupimento', 'entupimento'],
    tempo: 'at√© 1 hora (leve) ou mais (grave)',
    resposta: 'Se for um entupimento leve, resolvemos em at√© 1 hora. Casos mais graves exigem avalia√ß√£o no local.'
  }
];

/* ------------------------------ Palavras-chave ------------------------------ */
const precoKeywords = [
  'pre√ßo','preco','quanto custa','valor','cobra quanto','custo','qual o valor','quanto √©','quanto e','pre√ßo da visita','preco da visita'
];
const saudacoes = ['oi','ol√°','ola','bom dia','boa tarde','boa noite','e a√≠','e ai'];

/* ------------------------------ Textos ------------------------------ */
const encerramentoBase =
  'üìç Me diga seu *endere√ßo completo* e o *melhor dia/hor√°rio* para atendimento.\n' +
  'üìû *Um t√©cnico da nossa equipe vai entrar em contato com voc√™.*';

const followupMsg =
  'üîé *Enquanto aguarda o contato do t√©cnico*, pode nos ajudar com algumas informa√ß√µes?\n' +
  '‚Ä¢ H√° algo espec√≠fico que devamos saber sobre o problema?\n' +
  '‚Ä¢ O item/pe√ßa necess√°ria j√° est√° no local?\n' +
  '‚Ä¢ Poderia enviar *fotos* do local/equipamento? Isso nos ajuda a chegar mais preparados. üôè';

const respostaPreco =
  'üí∞ Os valores variam conforme o tipo de servi√ßo. Funciona assim:\n\n' +
  '1Ô∏è‚É£ *Servi√ßos simples (at√© 1 hora)*\n' +
  '‚Ä¢ Visita + 1 servi√ßo: *R$ 120*\n' +
  '‚Ä¢ Visita + 2 servi√ßos: *R$ 160*\n' +
  '‚Ä¢ Hora extra: *R$ 60*\n\n' +
  '2Ô∏è‚É£ *Servi√ßos com tempo vari√°vel (1 a 2 horas)*\n' +
  '‚Ä¢ Come√ßa com o pacote acima\n' +
  '‚Ä¢ Se passar de 1h, avisamos antes e cobramos hora extra\n\n' +
  '3Ô∏è‚É£ *Servi√ßos complexos (quebra de parede, local dif√≠cil)*\n' +
  '‚Ä¢ Fazemos uma visita de diagn√≥stico (*R$ 120*)\n' +
  '‚Ä¢ O valor √© abatido se voc√™ aprovar o or√ßamento.\n\n' +
  'üì∏ Se puder, envie uma foto do local para analisarmos melhor.';

const promptIA =
  'Voc√™ √© a atendente virtual da Resolve J√° ‚Äì Reparos e Manuten√ß√£o. ' +
  'Se a mensagem n√£o deixar claro o servi√ßo, pe√ßa que o cliente diga em uma frase curta o servi√ßo desejado (ex.: trocar torneira, instalar lumin√°ria, pendurar espelho). ' +
  'Se poss√≠vel, tente inferir a categoria (el√©trica, hidr√°ulica, instala√ß√£o, paredes/acabamento, portas/m√≥veis, desentupimento). ' +
  'Se identificar a categoria, responda apenas com a categoria (uma palavra). Do contr√°rio, pe√ßa a frase curta. ' +
  'Nunca diga que √© uma IA. Seja objetiva.';

/* ------------------------------ Menu numerado ------------------------------ */
const menuTexto =
  'N√£o identifiquei claramente o tipo de servi√ßo. Por favor, escolha uma op√ß√£o *respondendo s√≥ o n√∫mero*:\n' +
  '1Ô∏è‚É£ El√©trica\n' +
  '2Ô∏è‚É£ Hidr√°ulica\n' +
  '3Ô∏è‚É£ Instala√ß√£o de eletrodom√©sticos\n' +
  '4Ô∏è‚É£ Paredes e acabamento\n' +
  '5Ô∏è‚É£ Portas e m√≥veis\n' +
  '6Ô∏è‚É£ Desentupimento';

const menuMap = {
  '1': 'el√©trica',
  '2': 'hidr√°ulica',
  '3': 'instala√ß√£o',
  '4': 'paredes e acabamento',
  '5': 'ajustes em m√≥veis ou portas',
  '6': 'desentupimento'
};

/* ------------------------------ Estado em mem√≥ria por n√∫mero ------------------------------ */
/**
 * Por n√∫mero "from" (Twilio), armazenamos:
 * {
 *   servico: string|null,         // categoria detectada
 *   fechamentoEnviado: boolean,   // j√° enviou "t√©cnico vai entrar em contato"
 *   followupEnviado: boolean,     // j√° enviou pergunta extra (detalhes/fotos)
 *   desconhecidasSeguidas: number,// seq. de msgs sem conseguir entender servi√ßo
 *   aguardandoMenu: boolean       // se menu numerado foi enviado e aguardamos 1‚Äì6
 * }
 */
const historico = new Map();

/* ------------------------------ Helpers ------------------------------ */
function normalize(s) {
  return (s || '').toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
}
function includesAny(texto, lista) {
  const t = normalize(texto);
  return lista.some((p) => t.includes(normalize(p)));
}
function getTwilioFrom() {
  const n = process.env.TWILIO_SANDBOX_NUMBER || '';
  return n.startsWith('whatsapp:') ? n : `whatsapp:${n}`;
}
async function sendWhatsapp(to, body) {
  return axios.post(
    `https://api.twilio.com/2010-04-01/Accounts/${process.env.TWILIO_ACCOUNT_SID}/Messages.json`,
    new URLSearchParams({ Body: body, From: getTwilioFrom(), To: to }),
    { auth: { username: process.env.TWILIO_ACCOUNT_SID, password: process.env.TWILIO_AUTH_TOKEN } }
  );
}
function findServicoByCategoria(cat) {
  const ncat = normalize(cat);
  return servicos.find((s) => normalize(s.categoria) === ncat) || null;
}

/* Heur√≠sticas leves para detectar endere√ßo/hor√°rio s√≥ para disparar follow-up (opcional) */
const indiciosEndereco = ['rua','avenida','av ','alameda','travessa','estrada','rodovia','bairro','n¬∫','numero','n√∫mero','ap ','apt','apartamento'];
const indiciosHorario = ['amanh√£','amanha','hoje','manh√£','manha','tarde','noite','hor√°rio','horario','√†s ','as ','8:00','9:00','10:00','11:00','12:00','13:00','14:00','15:00','16:00','17:00','18:00','19:00','20:00'];
const horaRegex = /\b([01]?\d|2[0-3])[:h][0-5]\d\b/;

/* ------------------------------ Webhook ------------------------------ */
app.post('/webhook', async (req, res) => {
  const from = req.body.From;
  const userMsg = (req.body.Body || '').toString();
  const userMsgNorm = normalize(userMsg);

  let h = historico.get(from);
  if (!h) {
    h = { servico: null, fechamentoEnviado: false, followupEnviado: false, desconhecidasSeguidas: 0, aguardandoMenu: false };
  }

  // 0) Perguntas de pre√ßo: responder sempre que aparecerem
  if (includesAny(userMsg, precoKeywords)) {
    try { await sendWhatsapp(from, respostaPreco); historico.set(from, h); return res.sendStatus(200); }
    catch (err) { console.error('Twilio pre√ßo:', err.response?.data || err.message); return res.sendStatus(500); }
  }

  // 1) Sauda√ß√£o curta
  if (includesAny(userMsg, saudacoes) && userMsgNorm.length <= 40 && !h.fechamentoEnviado) {
    const msg = 'Ol√°! üëã Diga em uma frase o servi√ßo que precisa (ex.: *trocar torneira*, *instalar lumin√°ria*, *pendurar espelho*).';
    try { await sendWhatsapp(from, msg); historico.set(from, h); return res.sendStatus(200); }
    catch (err) { console.error('Twilio sauda√ß√£o:', err.response?.data || err.message); return res.sendStatus(500); }
  }

  // 2) Se est√° aguardando retorno do menu e o cliente respondeu 1‚Äì6
  if (h.aguardandoMenu) {
    const m = userMsgNorm.match(/^\s*([1-6])\b/);
    if (m) {
      const cat = menuMap[m[1]];
      const serv = findServicoByCategoria(cat);
      h.servico = serv ? serv.categoria : cat;
      h.aguardandoMenu = false;

      const tempo = serv?.tempo || 'tempo estimado vari√°vel';
      const textoCat = serv?.resposta || 'Podemos avaliar rapidamente e orientar o melhor formato.';
      const respostaServico =
        `Certo! Atendemos esse servi√ßo: *${h.servico}*.\n` +
        `‚è±Ô∏è Tempo estimado: *${tempo}*.\n` +
        `${textoCat}\n\n` +
        `${encerramentoBase}`;

      try { await sendWhatsapp(from, respostaServico); h.fechamentoEnviado = true; historico.set(from, h); return res.sendStatus(200); }
      catch (err) { console.error('Twilio menu -> servi√ßo:', err.response?.data || err.message); return res.sendStatus(500); }
    }
    // Se respondeu algo que n√£o √© 1‚Äì6, apenas repita o menu uma vez e siga
    try { await sendWhatsapp(from, menuTexto); historico.set(from, h); return res.sendStatus(200); }
    catch (err) { console.error('Twilio reenvio menu:', err.response?.data || err.message); return res.sendStatus(500); }
  }

  // 3) Tentativa direta por palavras-chave
  const servicoDetectado = servicos.find((s) => includesAny(userMsg, s.palavras));
  if (servicoDetectado && !h.fechamentoEnviado) {
    h.servico = servicoDetectado.categoria;
    const respostaServico =
      `Certo! Atendemos esse servi√ßo: *${servicoDetectado.categoria}*.\n` +
      `‚è±Ô∏è Tempo estimado: *${servicoDetectado.tempo}*.\n` +
      `${servicoDetectado.resposta}\n\n` +
      `${encerramentoBase}`;

    try { await sendWhatsapp(from, respostaServico); h.fechamentoEnviado = true; historico.set(from, h); return res.sendStatus(200); }
    catch (err) { console.error('Twilio servi√ßo direto:', err.response?.data || err.message); return res.sendStatus(500); }
  }

  // 4) Se j√° fechamos (avisamos t√©cnico), s√≥ disparamos 1 follow-up quando detectar endere√ßo/hor√°rio
  const indicouEndereco = includesAny(userMsg, indiciosEndereco);
  const indicouHorario = includesAny(userMsg, indiciosHorario) || horaRegex.test(userMsgNorm);
  if (h.fechamentoEnviado && !h.followupEnviado && (indicouEndereco || indicouHorario)) {
    try { await sendWhatsapp(from, followupMsg); h.followupEnviado = true; historico.set(from, h); return res.sendStatus(200); }
    catch (err) { console.error('Twilio follow-up:', err.response?.data || err.message); return res.sendStatus(500); }
  }

  // 5) Se ainda n√£o h√° servi√ßo: usar IA uma vez; se ainda vago, menu; se continuar, encaminhar
  if (!h.servico && !h.fechamentoEnviado) {
    h.desconhecidasSeguidas += 1;

    // Tentativa 1: pedir frase curta / tentar inferir categoria via IA
    if (h.desconhecidasSeguidas === 1) {
      try {
        const completion = await axios.post(
          'https://api.openai.com/v1/chat/completions',
          { model: 'gpt-4o-mini-2024-07-18', messages: [
              { role: 'system', content: promptIA },
              { role: 'user', content: userMsg }
            ] },
          { headers: { Authorization: `Bearer ${process.env.OPENAI_API_KEY}`, 'Content-Type': 'application/json' } }
        );

        const iaText = completion?.data?.choices?.[0]?.message?.content?.trim()?.toLowerCase() || '';
        // Se a IA respondeu com uma das categorias, j√° fecha
        const possivelCat = Object.values(menuMap).find(cat => iaText.includes(normalize(cat)));
        if (possivelCat) {
          const serv = findServicoByCategoria(possivelCat);
          h.servico = serv ? serv.categoria : possivelCat;
          const tempo = serv?.tempo || 'tempo estimado vari√°vel';
          const textoCat = serv?.resposta || 'Podemos avaliar rapidamente e orientar o melhor formato.';
          const respostaServico =
            `Certo! Atendemos esse servi√ßo: *${h.servico}*.\n` +
            `‚è±Ô∏è Tempo estimado: *${tempo}*.\n` +
            `${textoCat}\n\n` +
            `${encerramentoBase}`;
          await sendWhatsapp(from, respostaServico);
          h.fechamentoEnviado = true;
          historico.set(from, h);
          return res.sendStatus(200);
        }

        // Caso contr√°rio, pede a frase curta
        await sendWhatsapp(from, 'Para agilizar, me diga em uma frase o servi√ßo (ex.: *trocar torneira*, *instalar lumin√°ria*, *pendurar espelho*).');
        historico.set(from, h);
        return res.sendStatus(200);
      } catch (err) {
        console.error('OpenAI tentativa 1:', err.response?.data || err.message);
        try { await sendWhatsapp(from, 'Para agilizar, me diga em uma frase o servi√ßo (ex.: *trocar torneira*, *instalar lumin√°ria*, *pendurar espelho*).'); }
        catch (e2) { console.error('Twilio fallback t1:', e2.response?.data || e2.message); }
        historico.set(from, h);
        return res.sendStatus(200);
      }
    }

    // Tentativa 2: menu numerado
    if (h.desconhecidasSeguidas === 2) {
      try { await sendWhatsapp(from, menuTexto); h.aguardandoMenu = true; historico.set(from, h); return res.sendStatus(200); }
      catch (err) { console.error('Twilio menu t2:', err.response?.data || err.message); return res.sendStatus(500); }
    }

    // Tentativa 3+: encaminhar direto para t√©cnico (sem insistir)
    const msg =
      'Sem problemas! Vou pedir para um t√©cnico entrar em contato com voc√™ para entender melhor. ' +
      'Se puder, j√° me envie o *endere√ßo* e o *melhor dia/hor√°rio*.';
    try { await sendWhatsapp(from, msg); h.fechamentoEnviado = true; historico.set(from, h); return res.sendStatus(200); }
    catch (err) { console.error('Twilio t3 encaminhar:', err.response?.data || err.message); return res.sendStatus(500); }
  }

  // 6) Caso j√° tenha fechado e n√£o seja follow-up, mantemos sil√™ncio para evitar ru√≠do
  historico.set(from, h);
  return res.sendStatus(200);
});

/* ------------------------------ Healthcheck ------------------------------ */
app.get('/', (req, res) => {
  res.send('Resolve J√° ‚Äì IA ativa!');
});

app.listen(PORT, () => {
  console.log(`Servidor rodando na porta ${PORT}`);
});
